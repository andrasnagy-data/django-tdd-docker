name: Continuous Integration and Delivery

on: [push]

env:
  GITHUB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/drf

jobs:

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get version tag from pyproject.toml
        uses: SebRollen/toml-action@v1.0.2
        id: read_toml
        with:
          file: pyproject.toml
          field: tool.poetry.version
      - name: Pull image
        run: |
          docker pull ${{ env.GITHUB_IMAGE }}:${{ steps.read_toml.outputs.value }} || true
      - name: Checkout
        run: ls -la
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.GITHUB_IMAGE }}:${{ steps.read_toml.outputs.value }} \
            --tag ${{ env.GITHUB_IMAGE }}:${{ steps.read_toml.outputs.value }} \
            --file ./Dockerfile.prod \
            "."
      - name: Push image
        run: |
          docker push ${{ env.GITHUB_IMAGE }}:${{ steps.read_toml.outputs.value }}

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get version tag from pyproject.toml
        uses: SebRollen/toml-action@v1.0.2
        id: read_toml
        with:
          file: pyproject.toml
          field: tool.poetry.version
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:${{ steps.read_toml.outputs.value }} || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:${{ steps.read_toml.outputs.value }} \
            --tag ${{ env.IMAGE }}:${{ steps.read_toml.outputs.value }} \
            --file ./Dockerfile.prod \
            "."
      - name: Run container
        run: |
          docker run \
            -d \
            --name django-tdd \
            ${{ env.IMAGE }}:${{ steps.read_toml.outputs.value }}
      - name: Pytest
        run: docker exec django-tdd python -m pytest .
      - name: Flake8
        run: docker exec django-tdd python -m flake8 .
      - name: Black
        run: docker exec django-tdd python -m black . --check
      - name: isort
        run: docker exec django-tdd python -m isort . --check-only

  # deploy:
  #   name: Deploy to Heroku
  #   runs-on: ubuntu-latest
  #   needs: [build, test]
  #   env:
  #     HEROKU_APP_NAME: nameless-atoll-80952
  #     HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: main
  #     - name: Log in to GitHub Packages
  #       run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Get version tag from pyproject.toml
  #       uses: SebRollen/toml-action@v1.0.2
  #       id: read_toml
  #       with:
  #         file: pyproject.toml
  #         field: tool.poetry.version
  #     - name: Pull image
  #       run: |
  #         docker pull ${{ env.IMAGE }}:${{ steps.read_toml.outputs.value }} || true
  #     - name: Build image
  #       run: |
  #         docker build \
  #           --cache-from ${{ env.IMAGE }}:${{ steps.read_toml.outputs.value }} \
  #           --tag ${{ env.HEROKU_REGISTRY_IMAGE }} \
  #           --file ./Dockerfile.prod \
  #           "."
  #     - name: Log in to the Heroku Container Registry
  #       run: docker login -u _ -p ${HEROKU_AUTH_TOKEN} registry.heroku.com
  #       env:
  #         HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
  #     - name: Push to the registry
  #       run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}
  #     - name: Set environment variables
  #       run: |
  #         echo "HEROKU_REGISTRY_IMAGE=${{ env.HEROKU_REGISTRY_IMAGE }}" >> $GITHUB_ENV
  #         echo "HEROKU_AUTH_TOKEN=${{ secrets.HEROKU_AUTH_TOKEN }}" >> $GITHUB_ENV
  #     - name: Release
  #       run: |
  #         chmod +x ./release.sh
  #         ./release.sh